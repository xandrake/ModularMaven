import type { NextApiRequest, NextApiResponse } from 'next';
import { ENV } from '../../utils/constants';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST')
    return res.status(405).json({ error: 'Method not allowed' });

  const { prompt, model = 'ollama' } = req.body;

  if (!prompt) return res.status(400).json({ error: 'Missing prompt' });

  // ------------------------------------------------------------------
  //   1️⃣  Decide where to forward
  // ------------------------------------------------------------------
  if (model === 'ollama') {
    const ollamaUrl = `${ENV.ollamaUrl}/api/generate`;

    const ollamaRes = await fetch(ollamaUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        model: ENV.ollamaModel,
        prompt,
        temperature: 0.7,
        stream: true,
      }),
    });

    // forward as SSE
    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    ollamaRes.body.pipe(res);
  } else {
    // ChatGPT
    const chatRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.8,
        stream: true,
      }),
    });

    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    chatRes.body.pipe(res);
  }
}
